name: "Release: Publish"

on:
  push:
    branches:
      - main

jobs:
  
  validate:
    name: "ðŸ¦º Validation"
    if: ${{ startsWith(github.event.head_commit.message, 'Release v') }}
    uses: TWiStErRob/github-workflows/.github/workflows/validate.yml@19333c04e57739ec6074b09c6ca09c225c94dc09 # v1

  release:
    name: "ðŸš¢ Release"
    if: false
    needs:
      - validate

    permissions:
      # read: actions/checkout
      # write: gh release create
      contents: write

    runs-on: ubuntu-latest
    timeout-minutes: 5

    defaults:
      run:
        shell: bash

    steps:

      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v4

      - name: "Set up Java."
        uses: actions/setup-java@v4
        with:
          java-version-file: .java-version
          distribution: temurin

      - name: "Build CLI."
        run: >
          ./gradlew
          --no-daemon
          --continue
          --stacktrace
          versionFile
          fatJar
          distZip

      - name: "Version"
        id: prepare
        env:
          RELEASE_DIR: "release"
        run: |
          mkdir "${RELEASE_DIR}"
          cp "modules/ghlint/build/version.txt" "${RELEASE_DIR}/version.txt"
          version=$(cat release/version.txt)
          cp "modules/ghlint/build/libs/ghlint-${version}-fat.jar" "${RELEASE_DIR}/ghlint.jar"
          cp "modules/ghlint/build/distributions/ghlint-${version}.zip" "${RELEASE_DIR}/ghlint.zip"
          echo "version=${version}" >> "${GITHUB_OUTPUT}"

      - name: "Create Release."
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_TAG: v${{ steps.prepare.outputs.version }}
          RELEASE_TITLE: v${{ steps.prepare.outputs.version }}
        run: |
          link=$(
              gh release create "${RELEASE_TAG}" \
                  --title "${RELEASE_TITLE}" \
                  --latest \
                  --generate-notes \
                  "release/ghlint.jar#CLI executable" \
                  "release/ghlint.zip#CLI exploded distribution"
          )
          echo "::notice title=Release '${RELEASE_TITLE}' created::${link}"

  prepare:
    name: "Prepare Next Version"
    if: ${{ startsWith(github.event.head_commit.message, 'Release v') }}

    permissions:
      # actions/checkout@v4
      # git push
      contents: write
      # gh pr create
      pull-requests: write
      # gh pr create
      # https://github.com/TWiStErRob/net.twisterrob.ghlint/settings/actions
      # Allow GitHub Actions to create and approve pull requests: Enabled

    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    defaults:
      run:
        shell: bash

    steps:

      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v4

      - name: "Prepare changes."
        id: changes
        run: |
          old_version=$(grep -P --only-matching '(?<=project.version=)(.*)' gradle.properties)
          new_version=$(echo "${old_version}" | awk --field-separator=. '{print $1"."$2"."$3+1}')
          sed -re "s/^(project.version=)[0-9]+\.[0-9]+\.[0-9]+\$/\1${new_version}-SNAPSHOT/" -i gradle.properties
          echo "version=${version}" >> "${GITHUB_OUTPUT}"

      - name: "Prepare git for ${{ env.VERSION }}."
        env:
          VERSION: ${{ steps.changes.outputs.version }}
          GIT_USER: ${{ github.actor }}
          GIT_EMAIL: ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com
          GIT_BRANCH: prepare
        run: |
          git config user.name "${GIT_USER}"
          git config user.email "${GIT_EMAIL}"
          git checkout -b "${GIT_BRANCH}"
          git add gradle.properties
          git commit -m "Prepare next development version v${VERSION}"
          git push origin HEAD:"${GIT_BRANCH}" -u -f

      - name: "Create Release pull request."
        env:
          GH_TOKEN: ${{ github.token }}
          PR_BASE_BRANCH: main
          PR_TITLE: "Release v${{ steps.changes.outputs.version }}"
          PR_BODY: |
            Prepare release changes for ${{ steps.changes.outputs.version }}.
            
            -- _This PR was created by a [GitHub Actions Workflow][publish]'s [run][publish-run], see [Release Process][releasing]._
            
            [releasing]: ${{ github.server_url }}/${{ github.repository }}/blob/main/docs/RELEASING.md
            [publish]: ${{ github.server_url }}/${{ github.repository }}/actions/workflows/release-publish.yml
            [publish-run]: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          link=$(
              gh pr create \
                  --title "${PR_TITLE}" \
                  --body "${PR_BODY}" \
                  --base "${PR_BASE_BRANCH}"
          )
          echo "::notice title=Pull request '${PR_TITLE}' created::${link}"
